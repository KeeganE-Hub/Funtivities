//made this and the following function "writeEvent" to have modular schemas for future development
function setEvent(eventName, eventDate, eventTime, eventAddr, eventTxtBdy) {
    // 
    db.collection("Userid").doc("").set({
            name: eventName,
            date: eventDate,
            time: eventTime,
            address: eventAddr,
            textBody: eventTxtBdy
        })
        .then(function () {
            console.log("Document successfully written!");
        })
        .catch(function (error) {
            console.error("Error writing document: ", error);
        });
}

function writeEvent(eventName, eventDate, eventTime, eventAddr, eventTxtBdy) {
    db.collection("Events").add({
            name: eventName,
            date: eventDate,
            time: eventTime,
            address: eventAddr,
            textBody: eventTxtBdy
        })
        .then(function (docRef) {
            console.log("Document written with ID: ", docRef.id);
        })
        .catch(function (error) {
            console.error("Error adding document: ", error);
        });
}

//addEvent function passes the text field values to firebase database upon "next" button press
function addEvent() {
    document.getElementById('form-group').addEventListener('next'),
        function (e) {
            e.preventDefault();
            let eventName = document.getElementById("eventNameForm").value;
            let eventDate = document.getElementById("eventDateForm").value;
            let eventTime = document.getElementById("eventTimeForm").value;
            let eventAddr = document.getElementById("eventAdderssForm").value;
            let eventTxtBdy = document.getElementById("eventTxtBdyForm").value;

            //Need to decide how to organize the database ie.(autogenerated id tags via push as opposed to set,
            //need to do more research on tagging procedures and architecture)
            db.collection("userId").doc("event").set({
                    name: eventName,
                    date: eventDate,
                    time: eventTime,
                    address: eventAddr,
                    textBody: eventTxtBdy
                })
                .then(function () {
                    console.log("Document successfully written!");
                })
                .catch(function (error) {
                    console.error("Error writing document: ", error);
                });
        }
}

//displays event info from database to text on event page
function showEvent() {
    db.collection("userId").doc("userID").onsnapshot(
        function (snap) {
            //id names are placeholders
            document.getElementById("eventNameText").innerHTML = snap.data().name;
            document.getElementById("eventDateText").innerHTML = snap.data().date;
            document.getElementById("eventTimeText").innerHTML = snap.data().time;
            document.getElementById("eventAddrText").innerHTML = snap.data().address;
            document.getElementById("eventTxtBdyText").innerHTML = snap.data().textBody;
        }
    )
}
//takes whitespace separated tags, arrays them and adds them to existing tag stream
function tagEvent() {
    let userTags = document.getElementById("eventTagForm").value;
    let eventTags;
    db.collection("userId").doc("event").onsnapshot(
        function (snap) {
            eventTags = snap.data().tags;
        }
    )
    let tagArray = userTags.match(/\w+|\s+|[^\s\w]+/g);
    let wS = " ";
    for (let i = 0; i > tagArray.length - 1; i++) {
        if (tagArray[i] != wS) {
            eventTags.push(tagArray);
        }
    }
    db.collection("Events").doc("userId").update(eventArray);
}

function filterTags(userTags, eventTags) {
    for (let i = 0; i < userTags.length - 2; i++) {
        for (let j = 0; j < eventTags; j++) {
            if (userTags[i] == eventTags[j]) {
                return true;
            }
        }
    }
}